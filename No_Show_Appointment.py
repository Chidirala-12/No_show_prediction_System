# -*- coding: utf-8 -*-
"""Untitled37.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/17a01oaGDnLLkvF16msyOPwM7D62vo1no
"""

#DataSet
import pandas as pd
import numpy as np

cities = ['Mumbai', 'Delhi', 'Bangalore', 'Kolkata', 'Chennai', 'Hyderabad', 'Pune', 'Ahmedabad', 'Jaipur', 'Lucknow']
genders = ['Male', 'Female']

np.random.seed(42)

data = {
    'appointment_id': [f'APT{str(i+1).zfill(3)}' for i in range(100)],
    'location': np.random.choice(cities, size=100),
    'gender': np.random.choice(genders, size=100),
    'age': np.random.randint(25, 65, size=100),
    'prior_no_shows': np.random.randint(0, 4, size=100),
    'lead_time_days': np.random.randint(1, 21, size=100),
    'day': np.random.choice(['Mon', 'Tue', 'Wed', 'Thu', 'Fri'], size=100),
    'insurance': np.random.choice(['None', 'Private', 'Ayushman Bharat'], size=100),
    'distance_km': np.random.uniform(1, 100, size=100).round(1),
    'reminder': np.random.choice(['SMS', 'Email', 'None'], size=100),
    'bp': np.random.choice(['Normal', 'High', 'Low'], size=100),
    'diabetes': np.random.choice(['Yes', 'No'], size=100),
    'appointment_type': np.random.choice(['Routine Checkup', 'Specialist Visit', 'Emergency Follow-up'], size=100)
}

df = pd.DataFrame(data)
df.to_csv("input_samples.csv", index=False)



from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.metrics import classification_report, roc_auc_score, confusion_matrix
import warnings
warnings.filterwarnings('ignore')

def prepare_data(path="input_samples.csv"):
    df = pd.read_csv(path)

    if 'appointment_id' not in df.columns:
        df['appointment_id'] = [f'APT{str(i+1).zfill(3)}' for i in range(len(df))]

    if 'no_show' not in df.columns:
        np.random.seed(42)
        df['no_show'] = np.random.binomial(1, 0.4, size=len(df))

    # Convert categorical medical values into numbers
    df['appointment_type'] = df['appointment_type'].map({
        'Routine Checkup': 0,
        'Specialist Visit': 1,
        'Emergency Follow-up': 2
    })

    df['bp'] = df['bp'].map({
        'Low': 0,
        'Normal': 1,
        'High': 2
    })

    df['diabetes'] = df['diabetes'].map({
        'No': 0,
        'Yes': 1
    })

    features = ['age', 'prior_no_shows', 'lead_time_days', 'day', 'insurance',
                'distance_km', 'reminder', 'gender', 'bp', 'diabetes', 'appointment_type']
    target = 'no_show'

    num_cols = ['age', 'prior_no_shows', 'lead_time_days', 'distance_km']
    cat_cols = ['day', 'insurance', 'reminder', 'gender']

    return df, features, target, num_cols, cat_cols

def build_model(num_cols, cat_cols):
    preprocessor = ColumnTransformer([
        ('num', StandardScaler(), num_cols),
        ('cat', OneHotEncoder(handle_unknown='ignore'), cat_cols)
    ])

    model = Pipeline([
        ('prep', preprocessor),
        ('lr', LogisticRegression(class_weight='balanced'))
    ])
    return model

def train_and_evaluate(model, df, features, target):
    X = df[features]
    y = df[target]

    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
    model.fit(X_train, y_train)

    y_pred = model.predict(X_test)
    y_prob = model.predict_proba(X_test)[:, 1]

    print("=== Critical Metrics for No-Show Prediction ===")
    print(classification_report(y_test, y_pred, target_names=["Show (0)", "No-Show (1)"]))
    print(f"AUC: {roc_auc_score(y_test, y_prob):.2f} (1.0 = perfect)")
    print("\n=== Confusion Matrix ===")
    print(pd.crosstab(y_test, y_pred, rownames=['Actual'], colnames=['Predicted']))

    return model

def flag_and_intervene(df, model, features):
    X_all = df[features]
    df['no_show_risk'] = model.predict_proba(X_all)[:, 1]
    df['high_risk'] = df['no_show_risk'] > 0.6

    def make_message(row):
        risk = row['no_show_risk']

        if risk > 0.7:
            msg = "High risk. Call patient."
        elif risk > 0.5:
            msg = "Medium risk. Send SMS and confirm."
        else:
            msg = "Low risk. Normal reminder."

        if row['appointment_type'] == 2 and risk > 0.5:
            msg += " Critical case."
        if row['diabetes'] == 1:
            msg += " As a diabetic patient, timely checkups are crucial."
        if row['bp'] == 2:
            msg += " High BP patients should not skip appointments."
        elif row['bp'] == 0:
            msg += " Low BP needs regular monitoring."

        msg += " Health is priority. Your health is in your hands."
        return msg

    df['recommendation'] = df.apply(make_message, axis=1)
    return df.sort_values('no_show_risk', ascending=False)

# Run everything
df, features, target, num_cols, cat_cols = prepare_data()
model = build_model(num_cols, cat_cols)
trained_model = train_and_evaluate(model, df, features, target)
flagged = flag_and_intervene(df, trained_model, features)

# Display top 5 high-risk appointments with final messages
print("\nTop 5 High-Risk Patients:\n")
print(flagged[['appointment_id', 'no_show_risk', 'recommendation']].head(5))